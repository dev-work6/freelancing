(()=>{var e={};e.id=2340,e.ids=[2340],e.modules={56037:e=>{"use strict";e.exports=require("mongoose")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},86904:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>f,routeModule:()=>p,serverHooks:()=>v,workAsyncStorage:()=>y,workUnitAsyncStorage:()=>h});var i={};t.r(i),t.d(i,{DELETE:()=>m,GET:()=>c,PATCH:()=>l});var s=t(42706),n=t(28203),a=t(45994),o=t(39187),u=t(43694),d=t(91290);async function c(e,{params:r}){try{let e=(await r).id;await (0,u.A)();let t=await d.A.findById(e);if(!t)return o.NextResponse.json({error:"Hourly service not found"},{status:404});return o.NextResponse.json(t)}catch(r){let e=r instanceof Error?r.message:"Failed to fetch hourly service";return console.error("Error fetching hourly service:",r),o.NextResponse.json({error:e},{status:500})}}async function l(e,{params:r}){try{let t=(await r).id;await (0,u.A)();let i=await e.json(),s=await d.A.findByIdAndUpdate(t,i,{new:!0,runValidators:!0});if(!s)return o.NextResponse.json({error:"Hourly service not found"},{status:404});return o.NextResponse.json(s)}catch(r){let e=r instanceof Error?r.message:"Failed to update hourly service";return o.NextResponse.json({error:e},{status:400})}}async function m(e,{params:r}){try{await (0,u.A)();let e=(await r).id;if(!await d.A.findByIdAndDelete(e))return o.NextResponse.json({error:"Hourly service not found"},{status:404});return o.NextResponse.json({message:"Hourly service deleted successfully"})}catch(r){let e=r instanceof Error?r.message:"Failed to delete hourly service";return console.error("Error deleting hourly service:",r),o.NextResponse.json({error:e},{status:500})}}let p=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/services/hourly/[id]/route",pathname:"/api/services/hourly/[id]",filename:"route",bundlePath:"app/api/services/hourly/[id]/route"},resolvedPagePath:"C:\\Users\\Administrator\\Desktop\\freelance_work_showcase\\app\\api\\services\\hourly\\[id]\\route.ts",nextConfigOutput:"",userland:i}),{workAsyncStorage:y,workUnitAsyncStorage:h,serverHooks:v}=p;function f(){return(0,a.patchFetch)({workAsyncStorage:y,workUnitAsyncStorage:h})}},96487:()=>{},78335:()=>{},43694:(e,r,t)=>{"use strict";t.d(r,{A:()=>a});var i=t(56037),s=t.n(i);if(!process.env.MONGODB_URI)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let n=process.env.MONGODB_URI,a=async function(){try{let e=await s().connect(n);return console.log("MongoDB connected successfully"),e}catch(e){throw console.error("Error connecting to MongoDB:",e),e}}},91290:(e,r,t)=>{"use strict";t.d(r,{A:()=>o});var i=t(56037),s=t.n(i);let n=new i.Schema({message:{type:String,required:[!0,"Reply message is required"],trim:!0,maxLength:[1e3,"Reply cannot exceed 1000 characters"]},offerAmount:{type:Number,min:[0,"Offer amount cannot be negative"]},isFromAdmin:{type:Boolean,required:!0,default:!1},userId:{type:i.Schema.Types.ObjectId,ref:"User"},email:{type:String,trim:!0},createdAt:{type:Date,default:Date.now}}),a=new i.Schema({userId:{type:i.Schema.Types.ObjectId,ref:"User"},email:{type:String,trim:!0},name:{type:String,required:[!0,"Service name is required"],trim:!0,maxLength:[100,"Name cannot exceed 100 characters"]},description:{type:String,required:[!0,"Description is required"],trim:!0,maxLength:[500,"Description cannot exceed 500 characters"]},hourlyRate:{type:Number,required:[!0,"Hourly rate is required"],min:[0,"Hourly rate cannot be negative"]},currency:{type:String,required:[!0,"Currency is required"],enum:["INR","USD","EUR"]},minimumHours:{type:Number,required:[!0,"Minimum hours is required"],min:[1,"Minimum hours must be at least 1"]},maximumHours:{type:Number,min:[1,"Maximum hours must be at least 1"]},availability:{startTime:{type:Date,required:[!0,"Start time is required"]},endTime:{type:Date,required:[!0,"End time is required"]},timezone:{type:String,required:[!0,"Timezone is required"]},daysAvailable:[{type:String,enum:["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},skills:[{type:String,required:!0}],status:{type:String,enum:["available","busy","unavailable"],default:"available"},replies:[n],rating:{type:Number,default:0,min:0,max:5},totalBookings:{type:Number,default:0}},{timestamps:!0});a.pre("save",function(e){this.availability.endTime<=this.availability.startTime&&e(Error("End time must be after start time")),this.maximumHours&&this.maximumHours<this.minimumHours&&e(Error("Maximum hours must be greater than minimum hours")),e()}),a.index({userId:1}),a.index({status:1}),a.index({skills:1});let o=s().models.HourlyService||s().model("HourlyService",a)}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),i=r.X(0,[1989,5452],()=>t(86904));module.exports=i})();